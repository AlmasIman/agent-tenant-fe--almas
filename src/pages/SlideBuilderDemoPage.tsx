import React, { useState } from 'react';
import { Card, Button, Space, Typography, message } from 'antd';
import { PlayCircleOutlined, EyeOutlined } from '@ant-design/icons';
import { PageTitle } from '@app/components/common/PageTitle/PageTitle';
import { SlideBuilder, Slide, SlideType, SlidePresentation } from '@app/components/common/SlideBuilder';

const { Title, Paragraph } = Typography;

const SlideBuilderDemoPage: React.FC = () => {
  const [slides, setSlides] = useState<Slide[]>([
    {
      id: '1',
      type: SlideType.TEXT,
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å',
      content: '<h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2><p>–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –Ω–∞—à–µ–≥–æ –∫—É—Ä—Å–∞. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.</p>',
      order: 0,
      settings: {
        backgroundColor: '#ffffff',
        textColor: '#000000',
        fontSize: 16,
        alignment: 'center',
        showTitle: true,
        showNumber: true,
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '2',
      type: SlideType.GAME,
      title: '–ò–≥—Ä–∞ "–ü–∞–º—è—Ç—å"',
      content: JSON.stringify({
        game: {
          type: 'memory',
          config: {},
          rewards: 100
        }
      }),
      order: 1,
      settings: {
        backgroundColor: '#f0f8ff',
        showTitle: true,
        showNumber: true,
        width: 600,
        height: 500,
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '3',
      type: SlideType.ACHIEVEMENT,
      title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
      content: JSON.stringify({
        achievement: {
          title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
          description: '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å –∫—É—Ä—Å–∞',
          icon: 'üèÜ',
          points: 50,
          unlocked: true
        }
      }),
      order: 2,
      settings: {
        backgroundColor: '#fff7e6',
        showTitle: true,
        showNumber: true,
        alignment: 'center',
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '4',
      type: SlideType.PROGRESS,
      title: '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å',
      content: JSON.stringify({
        progress: {
          current: 3,
          total: 10,
          milestones: ['25%', '50%', '75%', '100%'],
          rewards: ['–ë–µ–π–¥–∂ –Ω–æ–≤–∏—á–∫–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∫—É—Ä—Å–∞–º']
        }
      }),
      order: 3,
      settings: {
        backgroundColor: '#f6ffed',
        showTitle: true,
        showNumber: true,
        alignment: 'center',
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '5',
      type: SlideType.FLASHCARDS,
      title: '–§–ª–µ—à-–∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
      content: JSON.stringify({
        flashcards: {
          cards: [
            {
              id: '1',
              front: '–ß—Ç–æ —Ç–∞–∫–æ–µ React?',
              back: 'JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
              category: 'Frontend',
              difficulty: '–õ–µ–≥–∫–æ'
            },
            {
              id: '2',
              front: '–ß—Ç–æ —Ç–∞–∫–æ–µ API?',
              back: 'Application Programming Interface - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º',
              category: 'Backend',
              difficulty: '–°—Ä–µ–¥–Ω–µ'
            },
            {
              id: '3',
              front: '–ß—Ç–æ —Ç–∞–∫–æ–µ Git?',
              back: '–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ',
              category: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
              difficulty: '–õ–µ–≥–∫–æ'
            }
          ],
          shuffle: true,
          showProgress: true
        }
      }),
      order: 4,
      settings: {
        backgroundColor: '#f9f0ff',
        showTitle: true,
        showNumber: true,
        alignment: 'center',
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '6',
      type: SlideType.QUIZ,
      title: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é',
      content: JSON.stringify({
        quiz: {
          questions: [
            {
              id: '1',
              question: '–ß—Ç–æ —Ç–∞–∫–æ–µ React?',
              options: [
                'JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
                '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'
              ],
              correctAnswer: 0,
              explanation: 'React - —ç—Ç–æ JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤'
            },
            {
              id: '2',
              question: '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?',
              options: [
                '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                '–ú–æ—Å–∫–≤–∞',
                '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
              ],
              correctAnswer: 1,
              explanation: '–ú–æ—Å–∫–≤–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏'
            },
            {
              id: '3',
              question: '2 + 2 = ?',
              options: ['3', '4', '5', '6'],
              correctAnswer: 1,
              explanation: '2 + 2 = 4'
            }
          ],
          shuffle: true,
          showExplanation: true
        }
      }),
      order: 5,
      settings: {
        backgroundColor: '#fff2e8',
        showTitle: true,
        showNumber: true,
        alignment: 'center',
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
    {
      id: '7',
      type: SlideType.FILL_WORDS,
      title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ',
      content: JSON.stringify({
        fillWords: {
          text: '___ - —ç—Ç–æ ___ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –û–Ω–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏–µ–π ___ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.',
          blanks: [
            {
              id: '1',
              word: 'React',
              hint: '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
              position: 0
            },
            {
              id: '2',
              word: 'JavaScript',
              hint: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
              position: 25
            },
            {
              id: '3',
              word: 'Facebook',
              hint: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å',
              position: 95
            }
          ],
          showHints: true,
          caseSensitive: false
        }
      }),
      order: 5,
      settings: {
        backgroundColor: '#e6fffb',
        showTitle: true,
        showNumber: true,
        alignment: 'center',
      },
      metadata: {
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      },
    },
  ]);

  const [isPresentationVisible, setIsPresentationVisible] = useState(false);

  const handleSlidesChange = (newSlides: Slide[]) => {
    setSlides(newSlides);
    message.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∞–π–¥–æ–≤: ${newSlides.length}`);
  };

  const handleExport = () => {
    const dataStr = JSON.stringify(slides, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'slides-export.json';
    link.click();
    URL.revokeObjectURL(url);
    message.success('–°–ª–∞–π–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
  };

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const importedSlides = JSON.parse(e.target?.result as string);
          setSlides(importedSlides);
          message.success('–°–ª–∞–π–¥—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞');
        }
      };
      reader.readAsText(file);
    }
  };

  const handleStartPresentation = () => {
    if (slides.length === 0) {
      message.warning('–°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ª–∞–π–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏');
      return;
    }
    setIsPresentationVisible(true);
  };

  const handleQuickPreview = () => {
    if (slides.length === 0) {
      message.warning('–°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ª–∞–π–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
      return;
    }
    setIsPresentationVisible(true);
  };

  return (
    <>
      <PageTitle>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–ª–∞–π–¥–æ–≤</PageTitle>
      
      <Card>
        <Space direction="vertical" style={{ width: '100%' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              <Title level={3}>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–ª–∞–π–¥–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ–≤</Title>
              <Paragraph>
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–∞–π–¥—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, –∫–æ–¥, –≥—Ä–∞—Ñ–∏–∫–∏, –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è.
              </Paragraph>
            </div>
            <Space>
              <Button 
                type="primary" 
                icon={<PlayCircleOutlined />} 
                onClick={handleStartPresentation}
                disabled={slides.length === 0}
              >
                –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
              </Button>
              <Button 
                type="default" 
                icon={<EyeOutlined />} 
                onClick={handleQuickPreview}
                disabled={slides.length === 0}
              >
                –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
              </Button>
              <Button onClick={handleExport}>
                –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–∞–π–¥–æ–≤
              </Button>
              <input
                type="file"
                accept=".json"
                onChange={handleImport}
                style={{ display: 'none' }}
                id="import-slides"
              />
              <Button onClick={() => document.getElementById('import-slides')?.click()}>
                –ò–º–ø–æ—Ä—Ç —Å–ª–∞–π–¥–æ–≤
              </Button>
            </Space>
          </div>

          <SlideBuilder
            slides={slides}
            onSlidesChange={handleSlidesChange}
            readOnly={false}
          />
        </Space>
      </Card>

      <SlidePresentation
        slides={slides}
        visible={isPresentationVisible}
        onClose={() => setIsPresentationVisible(false)}
      />
    </>
  );
};

export default SlideBuilderDemoPage;
